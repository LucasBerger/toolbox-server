GAMS 40.3.0  f227c22a Sep 16, 2022          WEX-WEI x86 64bit/MS Windows - 02/02/23 23:10:23 Page 1
Goemans/Williamson Randomized Approximation Algorithm for MaxCut (MAXCUT,SEQ=338)
C o m p i l a t i o n


   2   
      Let G(N, E) denote a graph. A cut is a partition of the vertices N
      into two sets S and T. Any edge (u,v) in E with u in S and v in T is
      said to be crossing the cut and is a cut edge. The size of the cut is
      defined to be sum of weights of the edges crossing the cut.
       
      This model presents a simple MIP formulation of the problem that is
      seeded with a solution from the Goemans/Williamson randomized
      approximation algorithm based on a semidefinite programming
      relaxation. By default CSDP is used to solve the SDP.
      Use --SDPSOLVER=MOSEK to switch to Mosek.
       
      The MaxCut instance tg20_7777 is available from the Biq Mac Library
      and comes from applications in statistical physics.
       
       
      Wiegele A., Biq Mac Library - Binary Quadratic and Max Cut Library.
      http://biqmac.uni-klu.ac.at/biqmaclib.html
       
      Goemans M.X., and Williamson, D.P., Improved Approximation Algorithms
      for Maximum Cut and Satisfiability Problems Using Semidefinite
      Programming. Journal of the ACM 42 (1995), 1115-1145.
      http://www-math.mit.edu/~goemans/PAPERS/maxcut-jacm.pdf
       
      Keywords: mixed integer linear programming, approximation algorithms,
                convex optimization, randomized algorithms, maximum cut problem,
                mathematics
  31   
  39   
  40  Set n 'nodes';
  41   
  42  Alias (n,i,j);
  43   
  44  Parameter w(i,j) 'edge weights';
  45   
  46  Set e(i,j) 'edges';
  47   
  48  Set S(n), T(n), bestS(n);
  49   
  50  Scalar
  51      wS      weight of cut S / -inf /
  52      maxwS   best weight / -inf /
  53      mingapS min gap / inf /;
  54   
  55  Scalar SDPRelaxation / inf /;
  56   
  57  parameter rep(*) / 'value of cut'              -inf
  58                     'value of best known bound' +inf
  59                     'relative gap'              NA   /;
  60   
  61   
  67  $ offembeddedCode n w
****                     $865
**** 865  Problem in embedded code section
  68   
  69  * We want all edges to be i-j with i<j;
  70  e(i,j)    = ord(i) < ord(j);
****    $352,352      $141     $141
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
**** 352  Set has not been initialized
  71  w(e(i,j)) = w(i,j) + w(j,i);
****      $352,352$141,352,352,352,352
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
**** 352  Set has not been initialized
  72  w(i,j)$(not e(i,j)) = 0;
****    $352,352    $352,352
**** 352  Set has not been initialized
  73   
  74  option e < w;
  75  *option e:0:0:1, w:8:0:1; display n,e,w;
  76   
  77  * Simple MIP model
  78  Variable
  79     x(n)     'decides on what side of the cut'
  80     cut(i,j) 'edge is in the cut'
  81     z        'objective';
  82   
  83  Binary Variable x;
  84   
  85  Equation obj, xor1(i,j), xor2(i,j), xor3(i,j), xor4(i,j);
  86   
  87  obj..          z      =e= sum(e, w(e)*cut(e));
  88   
  89  xor1(e(i,j)).. cut(e) =l= x(i) + x(j);
  90   
  91  xor2(e(i,j)).. cut(e) =l= 2 - x(i) - x(j);
  92   
  93  xor3(e(i,j)).. cut(e) =g= x(i) - x(j);
  94   
  95  xor4(e(i,j)).. cut(e) =g= x(j) - x(i);
  96   
  97  Model maxcut / all /;
  98   
  99   
 100  * QUBO Model
 101  equation defQUBO;
 102  defQUBO.. z =e= sum(e(i,j), w(e)*(sqr(x(i)) + sqr(x(j)) -2*x(i)*x(j)));
 103  model qubo / defQUBO /;
 104   
 105   
      Set up the SDP
         max W*Y s.t. Y_ii = 1, Y positive semidefinite (psd)
      We need to pass on the dual to csdp
         min x1 + x2 + ... + xn s.t. X = F1*x1 + F2*x2 + ... + Fn*xn - W, X psd
      with F_i = 1 for F_ii and 0 otherwise
 114   
 115   
 116  Parameter L(i,j) 'Cholesky factor of Y';
 117   
 119   
 120  Variable Y(i,j)    'PSDMATRIX';
 121  Variable sdpobj    'objective function variable';
 122  Equation sdpobjdef 'objective function W*Y';
 123  sdpobjdef.. sum(e(i,j),w(i,j)*(Y(i,j)+Y(j,i))/2.0) + sum((i,j),eps*Y(i,j)) =E= sdpobj;
 124  Y.fx(i,i) = 1.0;
****       $352,352
**** LINE    146 INPUT       C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.gms
**** 352  Set has not been initialized
 125  Model sdp / sdpobjdef /;
 126   
 127  option lp = MOSEK;
 128  sdp.limrow   = 0;
 129  sdp.limcol   = 0;
 130  sdp.solprint = 0;
 131  sdp.reslim   = 60-timeelapsed;
 132  Solve sdp min sdpobj using lp;
****                               $257
**** LINE    154 INPUT       C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.gms
**** 257  Solve statement not checked because of previous errors
 133   
 134  Parameter Yl(i,j)   'level values of Y as parameter';
 135  Yl(i,j) = Y.l(i,j);
****     $352,352   $352,352
**** LINE    157 INPUT       C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.gms
**** 352  Set has not been initialized
LIBINCLUDE C:\GAMS\40\inclib\linalg.gms
 137  *
 138  * LibInclude file to provide functionality of old matrix utilities cholesky via EmbeddedCode and numpy.linalg
 139  * -c runs this at compile time, -e at execution time (default)
 140  *
 141  * Usage: $libInclude linalg [-c|-e] cholesky i A L
 142  *        This calculates the Cholesky decomposition of a symmetric positive definite matrix A: A = LL^t
 143  *        The matrix A is indexed over A(i,i)
 144  *
 145  * Usage: $libInclude linalg [-c|-e] eigenvalue i A AVal
 146  *        This calculates the Eigenvalues of a symmetric positive definite matrix.
 147  *        The matrix A is indexed over A(i,i). AVal(i) is indexed over i.
 148  *
 149  * Usage: $libInclude linalg [-c|-e] eigenvector i A AVal AVec
 150  *        This calculates the Eigenvalues and Eigenvecors of a symmetric positive definite matrix.
 151  *        The matrices A and AVec are indexed over (i,i). AVal(i) is indexed over i.
 152  *
 153  * Usage: $libInclude linalg [-c|-e] invert i A AInv
 154  *        This calculates the inverse of a square matrix A: A*AInv = I
 155  *        The matrices A and AInv are indexed over (i,i)
 156  *
 157  * Usage: $libInclude linalg [-c|-e] ols [-info=infoSym] [-cfival=val] [-intercept=0,1,2] [-CDFStudentT=fname] [-iCDFStudentT=fname] [-rcond=val] i p A y estimate
 158  *        This estimates  the unknown parameters in a linear regression model.
 159  *        The set i are the observations, the set p are the estimates. The matrices
 160  *        A(i,p) contains the explanatory variable and y(i) the dependent variable.
 161  *        On return the symbol estimate(p) will contain the estimated statistical
 162  *        coefficients. The following parameters are available:
 163  *          -intercept=0,1,2      For 0 no constant term or intercept will be added to
 164  *                                the problem. For 1 a constant term will always be added.
 165  *                                For 2 (default) the algorithm will add a constant term
 166  *                                only if there is no data column with all ones in the matrix A.
 167  *          -cfival=val           The confidence interval value. Default is 0.95. This impacts
 168  *                                the calculation of confint_lo and confint_up.
 169  *          -CDFStudentT=fname    The name of the cumulative distribution function of the
 170  *                                StudentT distribution. The GAMS extrinisc function library
 171  *                                stodclib provides this function. The default is CDFStudentT.
 172  *                                The CDFStudentT is required to calculate pval.
 173  *          -iCDFStudentT=fname   The name of the inverse cumulative distribution function of the
 174  *                                StudentT distribution. The GAMS extrinisc function library
 175  *                                stodclib provides this function. The default is iCDFStudentT.
 176  *                                The iCDFStudentT is required to calculate confint_lo/up.
 177  *          -rcond=val            Cut-off ratio for small singular values of A used as argument
 178  *                                rcond to np.linalg.lstsq. Default is -1.
 179  *          -mergetype=val        Determines if the symbols will be merged or replaced when loading
 180  *                                into GAMS. Possible values are DEFAULT, REPLACE, and MERGE.
 181  *                                Capitalization of this argument is important.
 182  *                                See https://www.gams.com/latest/docs/UG_EmbeddedCode.html#UG_EmbeddedCode_Python
 183  *        Additonal regression statistics can be requested via -info=infoSym. -info without the
 184  *        infoSym, the name of info is used as a symbol name, e.g. -df sets GAMS scalar df.
 185  *        The following statistics are available:
 186  *          info        domain description
 187  *          confint_lo  p      confidence interval (lower bound)
 188  *          confint_up  p      confidence interval (upper bound)
 189  *          covar       p,p    variance-covariance matrix
 190  *          df                 degrees of freedom
 191  *          fitted      i      fitted values for dependent variable
 192  *          pval        p      p values
 193  *          r2                 R Squared
 194  *          resid       i      residuals
 195  *          resvar             residual variance
 196  *          rss                residual sum of squares
 197  *          se          p      standard errors
 198  *          sigma              standard error
 199  *          tval        p      t values
 200   
 201   
 205  *
 214   
 215  $EmbeddedCode Python:
 216  import numpy as np
 217  n2u = np.array(list(gams.get('n', keyType=KeyType.INT, valueFormat=ValueFormat.SKIP)),dtype=int)
 218  u2n = np.zeros(n2u[-1]-n2u[0]+1, dtype=int)
 219  for n,u in enumerate(n2u):
 220    u2n[u-n2u[0]] = n+1
 221  a = np.zeros((len(n2u),len(n2u)))  
 222  for r in gams.get('Yl', keyType=KeyType.INT, keyFormat=KeyFormat.FLAT):
 223    if r[0]>n2u[-1] or r[0]<n2u[0] or u2n[r[0]-n2u[0]] == 0: continue
 224    if r[1]>n2u[-1] or r[1]<n2u[0] or u2n[r[1]-n2u[0]] == 0: continue
 225    a[u2n[r[0]-n2u[0]]-1,u2n[r[1]-n2u[0]]-1] = r[2]
 226  l = np.linalg.cholesky(a)
 227  gams.set('L', [ (n2u[i],n2u[j],l[i,j]) for (i,j) in zip(*l.nonzero()) ], mapKeys=int)
 228  $endEmbeddedCode L
EXIT C:\GAMS\40\inclib\linalg.gms
 230   
 231  SDPRelaxation = 0.5*sum(e, w(e)*(1 - Y.l(e)));
 232   
 234   
 235  display SDPRelaxation;
 236   
 237  * Now do the random hyperplane r
 238  Parameter r(n);
 239   
 240   
 241  set hp      hyperplanes / hp1*hp10 /;
 242  parameter rep_hp(hp,*)
 243  loop(hp,
 244     r(n) = uniform(-1,1);
****       $352
**** LINE    173 INPUT       C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.gms
**** 352  Set has not been initialized
 245     S(n) = sum(i, L(n,i)*r(i)) < 0;
****       $352     $352 $352,352,352
**** LINE    174 INPUT       C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.gms
**** 352  Set has not been initialized
 246     T(n) = yes;
****       $352
**** LINE    175 INPUT       C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.gms
**** 352  Set has not been initialized
 247     T(S) =  no;
 248     wS   = sum(e(S,T), w(S,T)) + sum(e(T,S), + w(T,S));
 249     rep_hp(hp,'value of cut')              = ws;
 250     rep_hp(hp,'value of best known bound') = SDPRelaxation;
 251     rep_hp(hp,'relative gap')              = (SDPRelaxation-ws)/SDPRelaxation;
 252     if(wS > maxwS, maxwS = wS; mingapS = (SDPRelaxation-ws)/SDPRelaxation; bestS(n) = S(n););
****                                                                                  $352   $352
**** LINE    181 INPUT       C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.gms
**** 352  Set has not been initialized
 253  );
 254  option clear=S;
 255  S(bestS) = yes;
 256  T(n)     = yes;
****    $352
**** LINE    185 INPUT       C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.gms
**** 352  Set has not been initialized
 257  T(S)     =  no;
 258   
 259  display maxwS, mingapS, rep_hp;
 260   
 261  rep('value of cut')              = maxwS;
 262  rep('value of best known bound') = SDPRelaxation;
 263  rep('relative gap')              = (rep('value of best known bound')-rep('value of cut'))/rep('value of best known bound');
 264   
 265  put_utility 'log' / '### Value of cut:              ' rep('value of cut'):0:4;
 266  put_utility 'log' / '### Value of best known bound: ' rep('value of best known bound'):0:4;
 267  put_utility 'log' / '### Relative gap:              ' rep('relative gap'):0:16;
 268   
 269   
 270  * use computed feasible solution as starting point for MIP solve
 271  x.l(bestS)    = 1;
 272  cut.l(e(i,j)) = x.l(i) xor x.l(j);
****          $352,352    $352       $352
**** LINE    201 INPUT       C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.gms
**** 352  Set has not been initialized
 274   
 276   
 277   
 279  * SCIP and COPT do this by default, for other solvers we need to enable it
 282  option miqcp=cplex;
 283  file cpxopt2 / cplex.op2 /;
 284  putclose cpxopt2 'mipstart 1' /
 285  'upperobjstop ' SDPRelaxation:0:16
 286  putclose cpxopt2;
 287  qubo.optFile = 2;
 289  qubo.limrow   = 0;
 290  qubo.limcol   = 0;
 291  qubo.solprint = 0;
 292  qubo.reslim   = 60-timeelapsed;
 293  solve qubo max z using miqcp;
****                              $257
**** LINE    266 INPUT       C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.gms
**** 257  Solve statement not checked because of previous errors
 294   
 295  option clear=S;
 296  S(n) = x.l(n) > 0.5;
****    $352     $352
**** LINE    269 INPUT       C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.gms
**** 352  Set has not been initialized
 297  T(n)     = yes;
****    $352
**** LINE    270 INPUT       C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.gms
**** 352  Set has not been initialized
 298  T(S)     =  no;
 299   
 300  parameter rep(*);
 301  rep('value of cut')              = max(rep('value of cut'),z.l);
****                                                               $141
**** LINE    274 INPUT       C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.gms
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
 302  rep('value of best known bound') = min(rep('value of best known bound'),qubo.objest);
 303  rep('relative gap')              = (rep('value of best known bound')-rep('value of cut'))/rep('value of best known bound');
 305   
 306  put_utility 'log' / '### Value of cut:              ' rep('value of cut'):0:4;
 307  put_utility 'log' / '### Value of best known bound: ' rep('value of best known bound'):0:4;
 308  put_utility 'log' / '### Relative gap:              ' rep('relative gap'):0:16;
 309   
 310  *write solution
 313  embeddedCode Python:
 314  import networkx as nx
 315  # read input graph
 316  g = nx.read_gml("C:/Users/maxsc/Projects/toolbox-server/jobs/maxcut/2/problem.gml", label=None)
 317  # get cut value and bound ant turn them into graph attributes
 318  attrs_g = {"cut_value": list(gams.get('rep'))[0][1], "bound": list(gams.get('rep'))[1][1]}
 319  g.graph.update(attrs_g)
 320  # get node partition
 321  s = list(gams.get("S"))
 322  t = list(gams.get("T"))
 323  # turn node partitions into dicts
 324  attr1 = {}
 325  for n in s:
 326      try:
 327          attr1[int(n)] = {"Partition": 1}
 328      except ValueError:
 329          attr1[n] = {"Partition": 1}
 330  attr2 = {}
 331  for n in t:
 332      try:
 333          attr2[int(n)] = {"Partition": 2}
 334      except ValueError:
 335          attr2[n] = {"Partition": 2}
 336  # make node partition a node attribute
 337  nx.set_node_attributes(g, attr1)
 338  nx.set_node_attributes(g, attr2)
 339  lines = list(nx.generate_gml(g, stringizer=None))
 340  with open("C:/Users/maxsc/Projects/toolbox-server/jobs/maxcut/2/problem_sol.gml", 'w') as fout:
 341      if "Comment" in lines[1] or "id" in lines[2]:
 342          for line in lines[:5]:
 343              fout.write(line + '\n')
 344      else:
 345          for line in lines[:3]:
 346              fout.write(line + '\n')
 347              
 348      for node in g.nodes(data=True):
 349          if type(node[0]) == int:
 350              strNode = "  node [\n    id " + f'{node[0]}' + "\n"
 351          else:
 352              strNode = "  node [\n    id " + "\"{}\"".format(node[0]) + "\n"
 353          for key, val in node[-1].items():
 354              if type(val) == int or type(val) == float:
 355                  strNode += "    "+ str(key) + " " + f'{val}' + "\n"
 356              else:
 357                  strNode += "    "+ str(key) + " " + "\"{}\"".format(str(val)) + "\n"
 358          strNode += "  ]"
 359          fout.write(strNode + '\n')
 360      for edge in g.edges(data=True):
 361          if type(edge[0]) == int:
 362              strEdge = "  edge [\n    source " + f'{edge[0]}' + "\n    target " + f'{edge[1]}' + "\n"
 363          else:
 364              strEdge = "  edge [\n    source " + "\"{}\"".format(edge[0]) + "\n    target " + "\"{}\"".format(edge[1]) + "\n"
 365          for key, val in edge[-1].items():
 366              if type(val) == int or type(val) == float:
 367                  strEdge += "    " + str(key) + " " + f'{val}' + "\n"
 368              else: 
 369                  strEdge += "    " + str(key) + " " + "\"{}\"".format(str(val)) + "\n"
 370          strEdge += "  ]"
 371          fout.write(strEdge + '\n')
 372      fout.write("]")
 373  endembeddedCode
 374   

**** 42 ERROR(S)   0 WARNING(S)
GAMS 40.3.0  f227c22a Sep 16, 2022          WEX-WEI x86 64bit/MS Windows - 02/02/23 23:10:23 Page 2
Goemans/Williamson Randomized Approximation Algorithm for MaxCut (MAXCUT,SEQ=338)
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.gms
     2      136 LIBINCLUDE     1     158  .C:\GAMS\40\inclib\linalg.gms
     3      229 EXIT           2     105  .C:\GAMS\40\inclib\linalg.gms


COMPILATION TIME     =        1.312 SECONDS      3 MB  40.3.0 f227c22a WEX-WEI


USER: GAMS Demo license for Max Schweikart           G220922|0002CO-GEN
      TVA at the Karlsruhe Institute of Technology, Germany    DL074179


**** FILE SUMMARY

Input      C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.gms
Output     C:\Users\maxsc\Projects\toolbox-server\gams\maxcut\maxcut.lst

**** USER ERROR(S) ENCOUNTERED
