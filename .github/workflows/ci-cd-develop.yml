name: 'CI/CD'

on:
  push:

jobs:
  check:
    runs-on: ubuntu-latest
    container:
      image: debian:bullseye-slim # use the same image as our docker runner
    steps:
      - name: check connectivity
        run: |
          apt-get update
          apt-get install iputils-ping curl -y
          ping -c 10 -4 provideq.kit.edu || true
          ping -c 10 -6 provideq.kit.edu
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Set up GAMS
        shell: bash # required for the source command
        env:
          GAMS_LICENSE: ${{ secrets.GAMS_LICENSE }}
        run: |
          source ./scripts/setup-gams.sh
          echo "/opt/conda/bin" >> "$GITHUB_PATH"
          echo "$GAMS_PATH" >> "$GITHUB_PATH"
          echo "GMSPYTHONLIB=/opt/conda/envs/gams/lib/libpython3.10.so" >> "$GITHUB_ENV"
      - name: Install solver dependencies
        run: ./scripts/install-solver-dependencies.sh
      - name: Run checks
        shell: bash # required for the source command
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          source /opt/conda/bin/activate gams
          ./gradlew check sonar --info
      - name: Archive test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: build/reports/tests/test/
      - name: Archive style reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: style-report
          path: build/reports/checkstyle/

  deploy-staging:
    runs-on: ubuntu-latest
    needs: check
    if: ${{ github.ref == 'refs/heads/develop' }}
    steps:
      - name: Clone repo (shallow)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Push to dokku
        uses: dokku/github-action@master
        with:
          branch: develop
          # only extracting the server address to a secret avoids leaking it in the logs
          git_remote_url: ssh://dokku@${{ secrets.DOKKU_SERVER_ADDRESS }}/toolbox-backend-staging
          ssh_private_key: ${{ secrets.DOKKU_DEPLOYMENT_KEY }}
